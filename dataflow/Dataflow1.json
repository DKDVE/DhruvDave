{
	"name": "Dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Store1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "Store2",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "Store3",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "Store4",
						"type": "DatasetReference"
					},
					"name": "source4"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DestinationASA",
						"type": "DatasetReference"
					},
					"name": "DestASA",
					"rejectedDataLinkedService": {
						"referenceName": "dkdres-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "Merge"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Row ID} as string,",
				"          {Order ID} as string,",
				"          {Order Date} as string,",
				"          {Ship Date} as string,",
				"          {Ship Mode} as string,",
				"          {Customer ID} as string,",
				"          {Customer Name} as string,",
				"          Segment as string,",
				"          {Postal Code} as string,",
				"          City as string,",
				"          State as string,",
				"          Country as string,",
				"          Region as string,",
				"          Market as string,",
				"          {Product ID} as string,",
				"          Category as string,",
				"          {Sub-Category} as string,",
				"          {Product Name} as string,",
				"          Sales as string,",
				"          Quantity as string,",
				"          Discount as string,",
				"          Profit as string,",
				"          {Shipping Cost} as string,",
				"          {Order Priority} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          {Row ID} as string,",
				"          {Order ID} as string,",
				"          {Order Date} as string,",
				"          {Ship Date} as string,",
				"          {Ship Mode} as string,",
				"          {Customer ID} as string,",
				"          {Customer Name} as string,",
				"          Segment as string,",
				"          {Postal Code} as string,",
				"          City as string,",
				"          State as string,",
				"          Country as string,",
				"          Region as string,",
				"          Market as string,",
				"          {Product ID} as string,",
				"          Category as string,",
				"          {Sub-Category} as string,",
				"          {Product Name} as string,",
				"          Sales as string,",
				"          Quantity as string,",
				"          Discount as string,",
				"          Profit as string,",
				"          {Shipping Cost} as string,",
				"          {Order Priority} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          {Row ID} as string,",
				"          {Order ID} as string,",
				"          {Order Date} as string,",
				"          {Ship Date} as string,",
				"          {Ship Mode} as string,",
				"          {Customer ID} as string,",
				"          {Customer Name} as string,",
				"          Segment as string,",
				"          {Postal Code} as string,",
				"          City as string,",
				"          State as string,",
				"          Country as string,",
				"          Region as string,",
				"          Market as string,",
				"          {Product ID} as string,",
				"          Category as string,",
				"          {Sub-Category} as string,",
				"          {Product Name} as string,",
				"          Sales as string,",
				"          Quantity as string,",
				"          Discount as string,",
				"          Profit as string,",
				"          {Shipping Cost} as string,",
				"          {Order Priority} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(output(",
				"          {Row ID} as string,",
				"          {Order ID} as string,",
				"          {Order Date} as string,",
				"          {Ship Date} as string,",
				"          {Ship Mode} as string,",
				"          {Customer ID} as string,",
				"          {Customer Name} as string,",
				"          Segment as string,",
				"          {Postal Code} as string,",
				"          City as string,",
				"          State as string,",
				"          Country as string,",
				"          Region as string,",
				"          Market as string,",
				"          {Product ID} as string,",
				"          Category as string,",
				"          {Sub-Category} as string,",
				"          {Product Name} as string,",
				"          Sales as string,",
				"          Quantity as string,",
				"          Discount as string,",
				"          Profit as string,",
				"          {Shipping Cost} as string,",
				"          {Order Priority} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4",
				"source1, source2, source3, source4 union(byName: true,",
				"     partitionBy('hash', 1))~> Merge",
				"Merge sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Row ID} as string,",
				"          {Order ID} as string,",
				"          {Order Date} as string,",
				"          {Ship Date} as string,",
				"          {Ship Mode} as string,",
				"          {Customer ID} as string,",
				"          {Customer Name} as string,",
				"          Segment as string,",
				"          {Postal Code} as string,",
				"          City as string,",
				"          State as string,",
				"          Country as string,",
				"          Region as string,",
				"          Market as string,",
				"          {Product ID} as string,",
				"          Category as string,",
				"          {Sub-Category} as string,",
				"          {Product Name} as string,",
				"          Sales as string,",
				"          Quantity as string,",
				"          Discount as string,",
				"          Profit as string,",
				"          {Shipping Cost} as string,",
				"          {Order Priority} as string",
				"     ),",
				"     partitionFileNames:['Finalfile.txt'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DestASA"
			]
		}
	}
}